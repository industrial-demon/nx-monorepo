/* tslint:disable */
/* eslint-disable */
/**
 * Connectors
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ConnectionCreateDto
 */
export interface ConnectionCreateDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'orgId'?: string;
    /**
     * 
     * @type {object}
     * @memberof ConnectionCreateDto
     */
    'type'?: object;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'agentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'runtimeEnvironmentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'instanceDisplayName': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'host': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'port': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'database': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'codepage': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'updatedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'adjustedJdbcHostName': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'shortDescription': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'createTime': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCreateDto
     */
    'updateTime': string;
}
/**
 * 
 * @export
 * @interface ConnectionEntity
 */
export interface ConnectionEntity {
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'type': ConnectionEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'agentId': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'runtimeEnvironmentId': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'instanceDisplayName': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'host': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'database': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'codepage': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'adjustedJdbcHostName': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'shortDescription': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'port': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'createTime': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'updateTime': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'createdBy': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionEntity
     */
    'updatedBy': string;
}

export const ConnectionEntityTypeEnum = {
    CSV_FILE: 'CSVFile',
    MY_SQL: 'MySQL',
    AMAZON_S3_V2: 'Amazon_S3_v2',
    ORACLE: 'Oracle',
    FTP: 'FTP',
    SALESFORCE: 'Salesforce',
    MS_ACCESS: 'MS_ACCESS',
    WEB_SERVICES_CONSUMER: 'WebServicesConsumer',
    MSD: 'MSD',
    SQL_SERVER: 'SqlServer',
    SNOWFLAKE_CLOUD_DATA_WAREHOUSE_V2: 'Snowflake_Cloud_Data_Warehouse_V2',
    TOOLKIT_CCI: 'TOOLKIT_CCI'
} as const;

export type ConnectionEntityTypeEnum = typeof ConnectionEntityTypeEnum[keyof typeof ConnectionEntityTypeEnum];

/**
 * 
 * @export
 * @interface ConnectionUpdateDto
 */
export interface ConnectionUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectionUpdateDto
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface FilterViewDto
 */
export interface FilterViewDto {
    /**
     * 
     * @type {string}
     * @memberof FilterViewDto
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FilterViewDto
     */
    'type'?: Array<FilterViewDtoTypeEnum>;
    /**
     * 
     * @type {string}
     * @memberof FilterViewDto
     */
    'database'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilterViewDto
     */
    'createTime'?: string;
}

export const FilterViewDtoTypeEnum = {
    CSV_FILE: 'CSVFile',
    MY_SQL: 'MySQL',
    AMAZON_S3_V2: 'Amazon_S3_v2',
    ORACLE: 'Oracle',
    FTP: 'FTP',
    SALESFORCE: 'Salesforce',
    MS_ACCESS: 'MS_ACCESS',
    WEB_SERVICES_CONSUMER: 'WebServicesConsumer',
    MSD: 'MSD',
    SQL_SERVER: 'SqlServer',
    SNOWFLAKE_CLOUD_DATA_WAREHOUSE_V2: 'Snowflake_Cloud_Data_Warehouse_V2',
    TOOLKIT_CCI: 'TOOLKIT_CCI'
} as const;

export type FilterViewDtoTypeEnum = typeof FilterViewDtoTypeEnum[keyof typeof FilterViewDtoTypeEnum];

/**
 * 
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    'lastPage': number;
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    'currentPage': number;
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    'perPage': number;
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    'prev'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    'next'?: number | null;
}
/**
 * 
 * @export
 * @interface PaginationDto
 */
export interface PaginationDto {
    /**
     * 
     * @type {Meta}
     * @memberof PaginationDto
     */
    'meta': Meta;
    /**
     * Result of the selection by the specified parameters
     * @type {Array<ConnectionEntity>}
     * @memberof PaginationDto
     */
    'result': Array<ConnectionEntity>;
}
/**
 * 
 * @export
 * @interface SortingViewDto
 */
export interface SortingViewDto {
    /**
     * 
     * @type {string}
     * @memberof SortingViewDto
     */
    'name'?: SortingViewDtoNameEnum;
    /**
     * 
     * @type {string}
     * @memberof SortingViewDto
     */
    'type'?: SortingViewDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SortingViewDto
     */
    'createTime'?: SortingViewDtoCreateTimeEnum;
}

export const SortingViewDtoNameEnum = {
    ASC: 'asc',
    DESC: 'desc'
} as const;

export type SortingViewDtoNameEnum = typeof SortingViewDtoNameEnum[keyof typeof SortingViewDtoNameEnum];
export const SortingViewDtoTypeEnum = {
    ASC: 'asc',
    DESC: 'desc'
} as const;

export type SortingViewDtoTypeEnum = typeof SortingViewDtoTypeEnum[keyof typeof SortingViewDtoTypeEnum];
export const SortingViewDtoCreateTimeEnum = {
    ASC: 'asc',
    DESC: 'desc'
} as const;

export type SortingViewDtoCreateTimeEnum = typeof SortingViewDtoCreateTimeEnum[keyof typeof SortingViewDtoCreateTimeEnum];


/**
 * ConnectionsApi - axios parameter creator
 * @export
 */
export const ConnectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update one connection
         * @param {ConnectionCreateDto} connectionCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsControllerCreateOne: async (connectionCreateDto: ConnectionCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionCreateDto' is not null or undefined
            assertParamExists('connectionsControllerCreateOne', 'connectionCreateDto', connectionCreateDto)
            const localVarPath = `/api/connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(connectionCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all connections
         * @param {FilterViewDto} [filters] 
         * @param {SortingViewDto} [sortedBy] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsControllerFindAll: async (filters?: FilterViewDto, sortedBy?: SortingViewDto, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sortedBy !== undefined) {
                localVarQueryParameter['sortedBy'] = sortedBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete one connection
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsControllerRemoveOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('connectionsControllerRemoveOne', 'id', id)
            const localVarPath = `/api/connections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsControllerReplaceOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('connectionsControllerReplaceOne', 'id', id)
            const localVarPath = `/api/connections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update one connection
         * @param {string} id 
         * @param {ConnectionUpdateDto} connectionUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsControllerUpdateOne: async (id: string, connectionUpdateDto: ConnectionUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('connectionsControllerUpdateOne', 'id', id)
            // verify required parameter 'connectionUpdateDto' is not null or undefined
            assertParamExists('connectionsControllerUpdateOne', 'connectionUpdateDto', connectionUpdateDto)
            const localVarPath = `/api/connections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(connectionUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectionsApi - functional programming interface
 * @export
 */
export const ConnectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update one connection
         * @param {ConnectionCreateDto} connectionCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectionsControllerCreateOne(connectionCreateDto: ConnectionCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectionsControllerCreateOne(connectionCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all connections
         * @param {FilterViewDto} [filters] 
         * @param {SortingViewDto} [sortedBy] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectionsControllerFindAll(filters?: FilterViewDto, sortedBy?: SortingViewDto, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectionsControllerFindAll(filters, sortedBy, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete one connection
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectionsControllerRemoveOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectionsControllerRemoveOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectionsControllerReplaceOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectionsControllerReplaceOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update one connection
         * @param {string} id 
         * @param {ConnectionUpdateDto} connectionUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectionsControllerUpdateOne(id: string, connectionUpdateDto: ConnectionUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectionsControllerUpdateOne(id, connectionUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConnectionsApi - factory interface
 * @export
 */
export const ConnectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConnectionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Update one connection
         * @param {ConnectionsApiConnectionsControllerCreateOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsControllerCreateOne(requestParameters: ConnectionsApiConnectionsControllerCreateOneRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.connectionsControllerCreateOne(requestParameters.connectionCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all connections
         * @param {ConnectionsApiConnectionsControllerFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsControllerFindAll(requestParameters: ConnectionsApiConnectionsControllerFindAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaginationDto> {
            return localVarFp.connectionsControllerFindAll(requestParameters.filters, requestParameters.sortedBy, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete one connection
         * @param {ConnectionsApiConnectionsControllerRemoveOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsControllerRemoveOne(requestParameters: ConnectionsApiConnectionsControllerRemoveOneRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.connectionsControllerRemoveOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConnectionsApiConnectionsControllerReplaceOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsControllerReplaceOne(requestParameters: ConnectionsApiConnectionsControllerReplaceOneRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.connectionsControllerReplaceOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update one connection
         * @param {ConnectionsApiConnectionsControllerUpdateOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsControllerUpdateOne(requestParameters: ConnectionsApiConnectionsControllerUpdateOneRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.connectionsControllerUpdateOne(requestParameters.id, requestParameters.connectionUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for connectionsControllerCreateOne operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiConnectionsControllerCreateOneRequest
 */
export interface ConnectionsApiConnectionsControllerCreateOneRequest {
    /**
     * 
     * @type {ConnectionCreateDto}
     * @memberof ConnectionsApiConnectionsControllerCreateOne
     */
    readonly connectionCreateDto: ConnectionCreateDto
}

/**
 * Request parameters for connectionsControllerFindAll operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiConnectionsControllerFindAllRequest
 */
export interface ConnectionsApiConnectionsControllerFindAllRequest {
    /**
     * 
     * @type {FilterViewDto}
     * @memberof ConnectionsApiConnectionsControllerFindAll
     */
    readonly filters?: FilterViewDto

    /**
     * 
     * @type {SortingViewDto}
     * @memberof ConnectionsApiConnectionsControllerFindAll
     */
    readonly sortedBy?: SortingViewDto

    /**
     * 
     * @type {number}
     * @memberof ConnectionsApiConnectionsControllerFindAll
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ConnectionsApiConnectionsControllerFindAll
     */
    readonly perPage?: number
}

/**
 * Request parameters for connectionsControllerRemoveOne operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiConnectionsControllerRemoveOneRequest
 */
export interface ConnectionsApiConnectionsControllerRemoveOneRequest {
    /**
     * 
     * @type {string}
     * @memberof ConnectionsApiConnectionsControllerRemoveOne
     */
    readonly id: string
}

/**
 * Request parameters for connectionsControllerReplaceOne operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiConnectionsControllerReplaceOneRequest
 */
export interface ConnectionsApiConnectionsControllerReplaceOneRequest {
    /**
     * 
     * @type {string}
     * @memberof ConnectionsApiConnectionsControllerReplaceOne
     */
    readonly id: string
}

/**
 * Request parameters for connectionsControllerUpdateOne operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiConnectionsControllerUpdateOneRequest
 */
export interface ConnectionsApiConnectionsControllerUpdateOneRequest {
    /**
     * 
     * @type {string}
     * @memberof ConnectionsApiConnectionsControllerUpdateOne
     */
    readonly id: string

    /**
     * 
     * @type {ConnectionUpdateDto}
     * @memberof ConnectionsApiConnectionsControllerUpdateOne
     */
    readonly connectionUpdateDto: ConnectionUpdateDto
}

/**
 * ConnectionsApi - object-oriented interface
 * @export
 * @class ConnectionsApi
 * @extends {BaseAPI}
 */
export class ConnectionsApi extends BaseAPI {
    /**
     * 
     * @summary Update one connection
     * @param {ConnectionsApiConnectionsControllerCreateOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApi
     */
    public connectionsControllerCreateOne(requestParameters: ConnectionsApiConnectionsControllerCreateOneRequest, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).connectionsControllerCreateOne(requestParameters.connectionCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all connections
     * @param {ConnectionsApiConnectionsControllerFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApi
     */
    public connectionsControllerFindAll(requestParameters: ConnectionsApiConnectionsControllerFindAllRequest = {}, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).connectionsControllerFindAll(requestParameters.filters, requestParameters.sortedBy, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete one connection
     * @param {ConnectionsApiConnectionsControllerRemoveOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApi
     */
    public connectionsControllerRemoveOne(requestParameters: ConnectionsApiConnectionsControllerRemoveOneRequest, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).connectionsControllerRemoveOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConnectionsApiConnectionsControllerReplaceOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApi
     */
    public connectionsControllerReplaceOne(requestParameters: ConnectionsApiConnectionsControllerReplaceOneRequest, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).connectionsControllerReplaceOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update one connection
     * @param {ConnectionsApiConnectionsControllerUpdateOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApi
     */
    public connectionsControllerUpdateOne(requestParameters: ConnectionsApiConnectionsControllerUpdateOneRequest, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).connectionsControllerUpdateOne(requestParameters.id, requestParameters.connectionUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



